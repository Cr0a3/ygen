searchState.loadedDescShard("ygen", 0, "Ygen - Yet another Code Generator\nShared code generation classes (mainly used for register …\nThe ir module: functions for building function ir\nWriting/Reading object files\nThe pass manager module:\nOther utilites like:\nThe target module: every stuff which has to do with …\nDebugging information\nAllows you to inline ir:\nMost common used functions, classes, enums of this Libary\nThe allocation functions for the <code>CompilationHelper</code>\nhelps with compilation\nhandeles how constant imms are handeled (wether creating a …\ncreates the value as an const and loads the adress\na number\nuses the imm as the instr operand\nThe instructions for a single ir node\n<code>CompilationHelper</code> but with node metadata\na doc comment in the generated assembly code\na platform specifc instruction\nMachine specific settings, like the lowering function …\nA more machine specifc calling convention (Just a wrapper …\na low level instruction which is portable over platforms\nThe mnemonic to use\na low level operand which is portable over platforms\nout: out op0: variable op1: thingy to get moved\nout: out op0: variable op1: thingy to get moved\nstack arg\nstack arg cleanup\nA shared enum for registers\na register\nA register vector. Used for getting platform specific …\nstack offset\nAdds an operand\nReturns the alignment\nreturns the architecture of the register\nreturns the args for the specifc architecture\nreturns the args for the specifc architecture\nReturns the fp registers which are saved by the caller\nReturns the gr registers which are saved by the caller\nLoweres the add node\nLoweres the alloca node\nLoweres the and node\nLoweres the assign node\nLoweres the assign node\nLoweres the assign node\nLoweres the xor node\nLoweres the br cond node\nLoweres the call node\nLoweres the cast node\nLoweres the cmp node\nLoweres the div node\nLoweres the getelemptr node\nLoweres the load node\nLoweres the mul node\nLoweres the neg node\nLoweres the or node\nLoweres the rem node\nLoweres the ret node\nLoweres the select ty ty node\nLoweres the shl node\nLoweres the shr node\nLoweres the store node\nLoweres the sub node\nLoweres the switch node\nLoweres the xor node\nreturns if the list contains on of the register variants\ncreates a new documentation instruction\ndumps the instruction into a assembly string\nencodes the instruction\nFixes the instruction imm based on the rules\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the register one register variant is a variant …\nReturns if the specified register is an fp register\nReturns if the specified register is an gr register\nReturns the name of the mnemonic\ncreates a new <code>IrCodeGenHelper</code>\nCreates a new register vector\nCreates new machine settings\nCreates a new machine instr\nreturns how many arguments are stored in registers\npops a specific register from the register of the arch\npushes a specific register back to the register of the arch\nreturns the return register for the specific architecture …\nreversees the registers of the arch\nruns the register allocator\nSets the output of the instr\nreturns the stack shadow space\nturns the instruction into an floating point instruction …\na wasm variable\na register of the x64 platform\nA basic block: stores ir of a specific area of a function\nCreates an new block\nDescribes the block\nBuilds an stack allocation (the out var is the pointer to …\nSets the source location for debugging (all of the ir …\nBuilds the <code>getelemptr</code> node. It is used for example in this …\nthe load instruction loads an value from an pointer into a …\nBuilds a negate (negates the content of the variable)\nBuilds the phi node which recives variables from different …\nBuilds an switch statement\nA constant\nCreates a new function type\nCreates a new Function\nA function id (describes arguments and the name)\nA ir function with a known variable and arg size and count\nStores the function type\nThe given argument type doesn’t overllap with the actual …\nThe Module\nCreates a new module\nThe type of op0 operand doesn’t match the type of the …\nThe type of the ret node doesn’t match the function …\nTo many arguments were supplyed\nStores a type and a value of that type\nStores type metadata (just the type without data)\nA variable\nCreates a new variable\nAn error which stores if an ir node is invalid\nNotype\nNotype\nActivates dynamic arguments Makes that you can supply any …\nMakes, that debugging information is outputed from the …\nAdds a new function to the module\nAdds a new block to the function\nAdds a new constant to the module\nAdds an already defined function to the module\nAdds an already defined const to the module\nAfter the given arguments any argument type can be …\nReturns the argument as a var If the num doesn’t exists, …\nThe function arguments (stored as: num, type)\nReturns the size of the type in bits\nReturns the size of the type in bytes\nEmits the ir of the entire moudle into one string Maybe …\nEmits the Ir of the function into a string\nEmits the ir of the block into one string\nEmits the ir of the entire module into a colored string …\nEmits the Ir of the function into an colored string\nEmits the ir of the block into one colored string\nemits all function into one asm string\nemits the machine code of the module into an object file …\nemits machine instrs for target note: machine instrs are …\nemits all function into one asm file\nSets that the function is externally visible (same as: …\nSets that the constant is externally visible\nA f32\nf32\nA f64\nf64\nReturns if it is a float type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nputs the intenger into a type respecting the type metadata\ngets the data of the constant\nJust an i16 with a value\ni16\nJust an i32 with a value\ni32\nJust an i64 with a value\ni64\nJust an i8 with a value\ni8\nConstructs an id for the function\nSets that the function is imported from another object …\nSets that the constant is imported from another object file\nInitializes debugging metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores all ir nodes and the ir trait\nCreates a new module\nCreates a new function type\nCreates a new Function\nCreates a new block\nCreats a new variable\ncreates a new constant\nparses the input string into a module\nreturns the parsed typemetadata\nThis module contains the logic required for parsing …\nSets that the function is only internally visible (same as …\nSets that the constant is only internally visible\n64Bit pointer\nptr\nRequests an new variable name - which is the current var …\nThe return type\nRuns the pass manager over all functions\nRuns the pass manager over all blocks\nsets the data of the constant\nReturns if it is a signed type\nsame as Display::fmt but with colors\nThe function type\nJust an u16 with a value\nu16\nJust an u32 with a value\nu32\nJust an u64 with a value\nu64\nJust an u8 with a value\nu8\nReturns the inner value\nChecks if every function is correct:\nVerifys if the function and all of its blocks are correct:\nVerifys if the block and all of its ir nodes are correct:\nAn Ir node\nAn Ir node\nAn Ir node\nThe assign ir node\nAn Ir node\nAn Ir node\nUsed for overloading the build function\ndoes the math opeation on the values\nUsed for overloading the build function\ndoes the math opeation on the values\nTrait used for overloading the BuildAssign function\nbuilds an assignment\nThis trait is used for building br nodes\nBuilds a br node\nThis trait is used for building br condition nodes\nBuilds a br condition node\nTrait for the call instruction Used for overloading the …\nbuilds a function call\nTrait for the cast instruction Used for overloading the …\nbuilds an cast to form one variable into another type\nThe trait <code>BuildCmp</code> is used to build the cmp node\nbuilds the compare node\nUsed for overloading the build function\ndoes the math opeation on the values\nUsed for overloading the build function\ndoes the math opeation on the values\nUsed for overloading the build function\ndoes the math opeation on the values\nUsed for overloading the build function\ndoes the math opeation on the values\nReturns specified value\nTrait for the return instruction Used for overloading the …\nThis trait is used to build the select node\nThe select node. Let’s say this example:\nUsed for overloading the build function\ndoes the math opeation on the values\nUsed for overloading the build function\ndoes the math opeation on the values\nThe <code>BuildStore</code> trait is used for overloading the <code>BuildStore</code>…\nthe <code>store</code> node, stores a value into a allocted pointer\nUsed for overloading the build function\ndoes the math opeation on the values\nUsed for overloading the build function\ndoes the math opeation on the values\nCall ir node\nAn Ir node\nThe cmp node is used to compare values\nThe “compare mode” (e.g: ls is equal to rs)\nA node which startes a debugging line programm\nAn Ir node\nls == rs\nA trait used for constant propagination\nextracts an element out of a vector\nls &gt; rs\nls &gt;= rs\nan operand for ir nodes\nThe ir trait\nchecks if the node is another node\nls &lt; rs\nls &lt;= rs\nAn Ir node\nAn Ir node\nAn Ir node\nls != rs\nAn Ir node\nThe phi node which is used to influence the register …\nAn Ir node\nUsed for sus workaround to replace current ir node\nAn Ir node\nThe select ir node\nAn Ir node\nAn Ir node\nAn Ir node\nAn Ir node\nThe switch node is used to switch\nA type (like i64)\nA variable (like %.)\nAn Ir node\nTurns the ir node to an any\nClones the node into a box of <code>Box&lt;dyn Ir&gt;</code>\nthe code coloumn\nCompiles the node based on the given target\nCompiles the node with node information to the given target\nReturns the ir node as his textual representation\nReturns the ir node as his textual representation with …\nevaluteas the node\nthe file path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the arguments\nReturns the block which the br branches to\nReturns the false branch\nReturns the true branch\nReturns the call target\nReturns the type to which we cast\nReturns the mode with which the node compares\nReturns the condition variable\nReturns the condition\nReturns the false value as a constant\nReturns the false value as a variable\nReturns the type from which we cast\nReturns the input as a constant number\nReturns the input as a variable\nReturns the left side operand\nReturns the left side operand\nReturns the operand as a constant adr (Const data type)\nReturns the operand as a constant value\nReturns the output variable\nReturns the output variable\nReturns the output variable\nReturns the output variable\nReturns the output variable\nReturns the variable which stores the result of the call\nReturns the constant the node returns (else panics)\nReturns the variable the node returns (else panics)\nReturns the right side operand\nReturns the right side operand\nReturns the type\nReturns the true value as a constant\nReturns the true value as a variable\nReturns the type of the assignment\nReturns the type of the node\nReturns the type which is allocated\nReturns the type of the operand\nReturns the unwraped inner type value (else it panics)\nReturns the unwraped inner var value (else it panics)\nfirst inner value\nfirst inner value\nfirst inner value\nsecond inner value\nsecond inner value\nsecond inner value\nreturns the vars used by the node as input\nreturns a mutable reference to the vars used by the node …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nchecks if the node is equal to the other node (used for …\nchecks if the node is equal to the other node (used for …\nReturns if the false value is a constant\nReturns if the false value is a variable\nReturns if the input is a constant number\nReturns if the input is a var\nReturns if the left side operand is a var\nReturns if the operand is an constant ptr load\nReturns if the operand is an constant\nReturns the node a constant type?\nReturns the node a variable?\nReturns if the rright side operand is a var\nReturns if the true value is a constant\nReturns if the true value is a variable\nReturns if the operand is a type const (like 5 - a …\nReturns if the operand is a var\nthe code line\ninlines the variables if possible\ncreates an new assign ir node\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nCreates new instance\nreturns the output var\nReplaces current ir node\nReturns if the node uses the variable\nReturns if the node uses the variable\nverifys the instruction (used for return instruction) …\nAn error of another type\nValue defined twice\nExpected token\nan extern function has an body\nthe given return type is different than the expected one …\nAn error which can occure during one of the ygen-ir …\nthe lexer ran out of characters\nthe parser ran out of tokens\na block branches to a phi node, but the input of the block …\nthe name says it\nexpected an end to the sequence, but found no end\nUnexpected character\nUnexpected token\nunkown thing\nunkown instruction\nA unkown type\nfound the wrong argument\nReturns the argument unchanged.\nYgen-Ir ir emittment\nCalls <code>U::from(self)</code>.\nYgen-Ir lexing\nYgen-Ir parsing\nYgen-Ir semnatic checks\nthe branch name\nThe refering character\nThe box of the error\nexpected either one of these\nthe token which was expected\nthe expected return type\nthe expected argument\nexpected amount\nthe token which was found\nwhat was found\nthe found type\nthe found argument\nthe argument index\nThe character location\nThe character location\nThe location\nthe location\nthe location\nlocation\nlocation\nthe location\nwhere\nthe location\nlocation\nthe name\nthe “thingy“s name\nthe name of the function\nwhats unkown (e.g: block)\nEmits the ygen ir statements (emitted by the parser) into …\nReturns the argument unchanged.\nlowers the incoming statemants into ygen ir\nCalls <code>U::from(self)</code>.\nemits the generated functions, constants, .. into a usable …\nCreates a new ir generator\nblock:\n,\ncond\nconst\ndeclare\ndefine\n:\n=\n!\n@func_name\na-zA-Z.\n1234\nA lexer for lexing ygen ir strings\n{\n(\n[\nA location reference. Is recommended to be used for giving …\n}\n)\n]\n“abc”\nAn ir token\nThe token type for parsing ir\n…\n^abc (till line end)\n%name\nThe coloumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the sequence\n“lexes” the input\nThe line number\nThe entire source line\nthe location\nCreates a new ir lexer\nThe output\nthe type\na constant\na function\nParses ir tokens into ir statements with location data\nAn ir statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an new ir parser\nThe output\nparses the input\nsemantic analyze for ir stmts\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an new ir semnatic analyzizer\nverifys the input\nA constant data\nA mutable data (E.g: a global variable)\nA decl to say what’s the label/func\nThe dll builder: used for creating shared libaries like …\nThe exe builder: used for creating executables like .exe, …\nFrom another object file\nCan be seen outside and inside of object file\nA function\nOnly aviable in the object file\nLinks from one symbol to another\nThe linkage of the target symbol\nBuilds object files. It also supports debugging information\nThe addend to use\nThe binary offset of the start of the function\ninclude debugging information\nAdds one decl to the function\nAdds one decl to the function\nAdds one decl to the function\nSets the decls of the function\nDefines a symbol\nDefines a symbol\nDefines a symbol\nWrites the object file into the the specified file\nWrites the symbols into the shared libary\nWrites the symbols into the excutable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe link source\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe type\nLinks from one symbol to another\nCreates an new object builder\nCreates a new dll builder\nCreates a new exe builder\nIf it is a special relocation (only internal usage)\nThe link destination\nall analysis functions\nused for optimizing\nThe trait all Passes need to implement\nThe manager of all passes (PassManager)\nall passes\nAdds a new pass to the back of the pass queue\nAdds a new pass to the front of the pass queue\nAutomaticlly optimizes the input till it doesn’t change\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the name of the pass\nCreates an new pass manager\noptimizes self\nExecutes the entire pass queue\nRuns the pass on a block\nRuns the pass on a block\nRuns the pass on the entire function\nRuns the pass on the entire function\nanalyzes which blocks can branch to which other blocks\nanalyzes which blocks could branch to other blocks\nchecks if the block … branches to block …\nReturns if the target block branches to itself (or a block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new ConstantEvaluation pass which is heap …\nCreates a new DeadBlockElimination pass which is heap …\nCreates a new DeadNodeElimination pass which is heap …\nThe instruction combine pass is used to combine multiple …\nA command line parser\nA simple color\nThe color markup class\nColore encoder: Encodes a string by a specifed format E.g: …\nThe user color profile is used to store how ir elements …\nClorize trait: Colorizes a string\nAn Error: an Error struct can store Error informations\nA trait to pad strings\nPrints the error and exits the process If no error occured …\nThe Source Manager: easly chars out of a file\nThe token manager\nAdvanced type switching\nAdds a where arrow\nAdds an argument which is seperated by a <code>=</code>\nAdds an option\nReturns true if argument was seen\nReturns the value of the seen argument\nBlue color channel\nMakes the background of the string black\nMakes the background of the string blue\nMakes the string to a specified background color\nMakes the background of the string cyan\nMakes the background of the string gray\nMakes the background of the string green\nMakes the background of the string magenta\nMakes the background of the string red\nMakes the background of the string white\nMakes the background of the string yellow\nMakes the string black\nMakes the string blue\nMakes the string bold\nadds an <code>TypeSwitch</code> case\nMakes the string to the specified color\nMakes the string cyan\nDeactivates location display\nEncodes a string by a specifed format E.g: Hi I am blueHi …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGreen color channel\nReturns the current position in the specified file\nReturns the current char in the specified file\nMakes the string gray\nMakes the string green\nPrints help\nSets the color of instr class\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes the string italitc\nMakes the string magenta\nMarkups the given string by the color class\nSets the color of name class\nCreates a new CLI parser\nCreates a new token manager\nCreates an new error\nCreates an empty <code>TypeSwitch</code>\nCreats a new SrcMngr\nCreates new color settings which are defaulted to black\nReturns true if option was seen\nPads the string to a spicific len (if the input string is …\nPrints the error and exits the process If no error occured …\nPrints the error to stderr\nRed color channel\nMakes the string red\nRegisters a new file\nScans the arguments\nScans all tokens of an specific input file\nSets the code line\nSets the callback of the TokenMgr which is called for …\nMakes the string striketrough\n“Switches\nSets the color of ty class\nMakes the string underlined\nSets the color of value class\nSets the color of var class\nPrints the version and description\nMakes the string white\nMakes the string yellow\nAarch 64\nAarch64_be\nAix\nhow strong allowed the object is\nAmd\nAmd GCN\nAmdHSA\nAmdIL\nAmdIL64\nAmdPAL\nAnanas\nAndroid\nApple\nApple version of the aarch64 calling convention\narc\nTarget architecture\nArm\nArm eb\nThe <code>AsmPrinter</code>-trait is used to dump assembly code in …\nAvr\nBgp\nBpfeb\nBpfel\nTarget calling convention\nCloudABI\nCnk\nCode16\nCoff\nAn wrapper trait for assembly compilers\nContiki\nCore CLR\nCsr\nCuda\nCygnus\nDarwin\nPlatforms default (e.g: Windows -&gt; Coff)\nDragonFly\nEABI\nEABIHF\nElf\nElfIAMCU\nTarget environment\nFreeBSD\nFreescale\nFuchsia\nGnu\nGnu ABI64\nGnu ABIN32\nGnu EABI\nGnu EABIHF\nGnu X32\nHaiku\nHermitCore\nHexagon\nHsail\nHsail64\nHurd\nIbm\nImagination Technologies\nIOS\nItanium\nkFreeBSD\nKalimba\nLanai\nLe32\nLe64\nThe lexer trait\nLinux\nLv2\nMacOS\nMachO\nMesa\nMesa3D\nMinix\nMips\nMips64\nMips64EL\nMips Technologies\nMipsel\nMsp420\nMsvc\nMusl\nMusl EABI\nMusl EABIHF\nMyriad\nNaCl\nNetBSD\nNvcl\nNvidia\nNvptx\nNvptx64\nTarget OS\nTarget object format\nOpenBSD\nOpen Embedded\nPC\nPower Pc\nPower PC 64\nPower PC 64 Little endian\nPs4\nR600\nStores errors which can occure in the <code>getBasedOnTriple</code> …\nRenderScript 32\nRenderScript 64\nRiscv32\nRiscv64\nRtems\nScei\nShave\nSimulator\nSolaris\nSparc\nSparcel\nSparc v9\nSpir\nSpir64\nSuse\nLinux standart\nSystemZ\nThe TargetBackendDescr is used to store all the …\nThe target registry: manages different targets\nTce\nTce le\nThumb\nThumb EB\nThe target triple\nTvOS\nUnknown Architecture\nUnknown Vendor\nUnknown OS\nUnknown environment\nUnknown\nAn unsupported architecture\nVendor\nWasi\nWasm\nWasm32\nWasm64\nThe webassembly calling convention\nWatchOS\nStores allowed instructions\nWin32\nWindows standart\nx86\nx86 64Bit\nXcoff\nXcore\nAdds an new target architecture\nAllowes a specifc mnemonic\nThe target architecture to use\nObject format\nReturns self into a boxed lexer trait\nBuilds the ir of the given triple into text assembly code  …\nbuild the debugging information for an function\nBuilds the ir of the given triple into machine code  …\nemits machine instrs for target  <strong>note</strong>: machine instrs are …\nbuilds all ir nodes of the current block into a vector of …\nbuilds the instruction with ir debug metadata\nChecks for forbidden mnemonics\nclones itself into a asmprinter boxed object\nReturns the parsed instruction colored\nreturns the string as commetet\nreturns the string as commetet\nReturns the compiler to use with the TargetBackendDescr\nThe runtime environment\nForbids a specfic mnemonic\nReturns the argument unchanged.\nJust another name for the parse function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the <code>TargetBackendDescr</code> for the arch (also it …\nreturns the calling convention used by the triple\nReturns the host target triple\nInitializes all targets\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the mnemonic is allowed\nlexes the string\nReturns the lexer to use with the TargetBackendDescr\nUsed for lowering machine instructions into dyn MCInstr\nloweres the machine instructions into dyn MCInstr but with …\nCreates an new assembly compiler\nCreates an new backend registry\nCreates a new instance\nCreates a new instruction whitelist\nThe target calling convention to use\nReturns the output machine code\ncompiles an assembly string into machine code\nParses the target triple string. Returns the target triple …\nprints the assembly code for the module\nReturns the parsed instruction as a string\nreturns if the function needs to get an added prolog\nResets all values to “factory standart”\nSets the calling convention to use for the specified …\nThe Vendor (If anyone knowns what this is please create an …\nThe wasm target\nThe x64 Target\nWasm instruction encoding\nInitializes the wasm target\nWasm assembly printing\nA wasm instruction\nA webassembly mnemonic (prefix.mnemonic)\nA webassembly operand\nA webassembly prefix (prefix.mnemonic)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an wasm instruction without any operands\nCreates an wasm instruction with 1 operand\nprints assembly in wasm style\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreates an new wasm assembly printer\nThere is an unexpected comma\nAn empty memory displacment []\nThe first token is not an identifier\nAn invalid intenger\nAn error which can occure during lexing\nA not supported character\nAn error which can occure during parsing\nUnexpected token\nthese tokens are unexpected\nUnknown instruction\nThe identifier was unexpected or isn’t an valid register\nA x64 register\nReturns if the register is callee saved on the given …\nReturns if the reg is in the extendet region (r8-&gt;r15)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the x86-64 target\nx64 instruction encoding (compilation) and verifycation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the register (or better the subvariant) 16 bit wide?\nIs the register (or better the subvariant) 32 bit wide?\nIs the register (or better the subvariant) 64 bit wide?\nIs the register (or better the subvariant) 8 bit wide?\nIs the register a xmm register?\nCreates an new x64 assembly parser\nX64 assembly optimizations\nThe output instruction\nParses the string to an register (Returns none if it’s …\nparses the tokens (output will be saved in <code>self.out</code>)\nX64 Style assembly printing\nThe sub 16 bit wide variant of the register\nThe sub 32 bit wide variant of the register\nThe sub 64 bit wide variant of the register\nThe sub8 bit wide variant of the register\ngets the subvariant based on the type\nA temporary structure which implements the Lexer trait\nThe parser for parsing x64 assembly instructions\nA link destination to a block\nfor debugging pourpusis\nFor debugging\nstop optimization\nA number operand\nAn error which can occure during encoding instructions\nThe given instruction has an invalid variant\nhere’s a link placed\nA link destination\nA memory displacement\nA memory displacement\nThe instructions mnemonic\nThe operand type and value to use\nA register operand\nA rip relative\nstart optimization again\nThe target instruction\nThe base register\nemits the instruction as one colored string\nDoes the same as the encode function just for naming …\nThe displacement\nreturns if the instruction is empty like mov rsi, rsi\nEncodes the instruction (some will say compiles)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index register\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\nReturns if the operand is a imm\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\nReturns if the operand is a memory displacmenet or rip …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\nChecks if the first operand is an imm\nChecks if the first operand is a memory displacment\nChecks if the first operand is a register\nChecks if the second operand is an imm\nChecks if the second operand is a memory displacment\nChecks if the second operand is a register\nChecks if the second operand is a rip relative\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\nReturns if the operand is a register\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\n[AUTO GENERATED] checks if the instruction is the same as …\nMakes the instruction use far calls (for call and so on)\nThe mnemonic to use\nFirst operand\nSecond operand\nThird operand\nrip relativ\nThe scale\nReturns the instruction as assembly representation\nVerifys the instruction (like checking the right opcodes …\nCreates the instruction with 0 operands\nCreates the instruction with 1 operand\nCreates the instruction with 2 operands\nCreates the instruction with 3 operands\nPerforms optimizations on the input assembly strings using …\nprints assembly in x64 style\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreates an new x64 assembly printer\nThe debugging location\nThe debug register is used to store files and their file id\nA variable to debug\nDebugging source languages\nadds a debugging location\nThe addres of the location relativ from the start of the …\nthe coloumn which the debug location is refering to\nIf the location is the end of the prolog\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe line which the debug location is refering to\nCreates a new debug variable\nCreates a new debug registry\nIf the location is the start of the epilog")